#!/usr/bin/env node
const{exec:exec}=require("child_process"),fs=require("fs"),path=require("path");process.argv.length<3&&(console.log("No arguments supplied"),process.exit(1));const[,,...args]=process.argv,projectName=args[0],projectPath=path.join(process.cwd(),projectName);async function runCommand(e){return new Promise(((t,n)=>{exec(e,((e,s,i)=>{e?n(e):t(s||i)}))}))}(async()=>{try{await runCommand(`npm create vite@latest ${projectName} -- --template react-ts`),await runCommand(`cd ${projectName} && npm install -D tailwindcss postcss autoprefixer  @headlessui/react @heroicons/react`),await runCommand(`cd ${projectName} && npx tailwindcss init -p`);const e=path.join(projectPath,"tailwind.config.js"),t='/** @type {import(\'tailwindcss\').Config} */\nexport default {\n  content: [\n    "./index.html",\n    "./src/**/*.{js,ts,jsx,tsx}",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}';fs.writeFileSync(e,t);path.join(projectPath,"src","App.tsx");const n=path.join(projectPath,"src","index.css"),s="@tailwind base;\n@tailwind components;\n@tailwind utilities;\n";fs.writeFileSync(n,s),console.log("The new tailwind.config.js file has been created with the specified contents."),console.log("The new ./src/index.css file has been created with the specified contents."),console.log("Start using Tailwind's utility classes to style your content."),console.log("run 'npm run dev' to start the dev server")}catch(e){console.error("Error:",e)}})();